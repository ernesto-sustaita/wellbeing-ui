{"ast":null,"code":"import { SnackBarDistractionComponent } from '../snack-bar-distraction/snack-bar-distraction.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/icon\";\nconst _c0 = [\"secondsLine\"];\nfunction MeditationComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Total time: \", ctx_r1.totalTime, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Distractions: \", ctx_r1.distractions, \"\");\n  }\n}\nfunction MeditationComponent_button_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function MeditationComponent_button_18_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.addDistraction());\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"add_circle\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3, \" Distraction \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class MeditationComponent {\n  constructor(activatedroute, router, snackBar) {\n    this.activatedroute = activatedroute;\n    this.router = router;\n    this.snackBar = snackBar;\n    this.distractions = 0;\n    this.isDistractedButtonVisible = false;\n    this.isSummaryPanelVisible = false;\n    this.isStopWatchVisible = false;\n    this.secondsDisplay = '';\n    this.minutesDisplay = '';\n    this.seconds = 60;\n    this.minutes = 0;\n    this.totalTime = 0;\n    this.minutesToSeconds = 0;\n    this.degreesForSecond = 0;\n    this.degreesAccumulator = 0;\n    this.activatedroute.params.subscribe(data => {\n      this.minutes = data.minutes;\n    });\n    if (this.minutes <= 0) this.router.navigate(['/set-meditation-time']);\n  }\n  ngOnInit() {\n    this.isDistractedButtonVisible = true;\n    this.isStopWatchVisible = true;\n    this.totalTime = this.minutes;\n    this.minutesToSeconds = this.minutes * 60;\n    this.degreesForSecond = 360 / this.minutesToSeconds;\n    this.degreesAccumulator = this.degreesForSecond;\n    this.minutes--;\n    this.playBell();\n    this.startMeditation();\n  }\n  playBell() {\n    const audio = new Audio('assets/sound/tibetan-bell-sound-8s.mp3');\n    audio.play();\n  }\n  startMeditation() {\n    let timeoutId = setTimeout(() => {\n      this.seconds--;\n      if (this.seconds == -1) {\n        this.minutes -= 1;\n        this.seconds = 59;\n      }\n      if (this.seconds < 10) {\n        this.secondsDisplay = '0' + this.seconds;\n      } else {\n        this.secondsDisplay = this.seconds.toString();\n      }\n      if (this.minutes < 10) {\n        this.minutesDisplay = '0' + this.minutes;\n      } else {\n        this.minutesDisplay = this.minutes.toString();\n      }\n      this.secondsLine.nativeElement.style.transform = 'rotate(' + this.degreesAccumulator + 'deg)';\n      this.degreesAccumulator += this.degreesForSecond;\n      if (this.minutes == 0 && this.seconds == 0) {\n        this.playBell();\n        this.isSummaryPanelVisible = true;\n        this.isDistractedButtonVisible = false;\n        this.isStopWatchVisible = false;\n        clearTimeout(timeoutId);\n        return;\n      }\n      this.startMeditation();\n    }, 1000);\n  }\n  addDistraction() {\n    this.distractions += 1;\n    this.openDistractionSnackBar();\n  }\n  openDistractionSnackBar() {\n    this.snackBar.openFromComponent(SnackBarDistractionComponent, {\n      duration: 10 * 1000\n    });\n  }\n}\nMeditationComponent.ɵfac = function MeditationComponent_Factory(t) {\n  return new (t || MeditationComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.MatSnackBar));\n};\nMeditationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MeditationComponent,\n  selectors: [[\"app-meditation\"]],\n  viewQuery: function MeditationComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.secondsLine = _t.first);\n    }\n  },\n  decls: 19,\n  vars: 4,\n  consts: [[\"id\", \"stopwatch-container\"], [1, \"clock\"], [\"viewBox\", \"0 0 120 120\", \"version\", \"1.1\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"circle\"], [\"cx\", \"60\", \"cy\", \"60\", \"r\", \"60\", 1, \"outer-circle\"], [\"cx\", \"60\", \"cy\", \"60\", \"r\", \"57\"], [\"x1\", \"60\", \"y1\", \"0\", \"x2\", \"60\", \"y2\", \"60\", 1, \"seconds\"], [\"secondsLine\", \"\"], [\"cx\", \"60\", \"cy\", \"60\", \"r\", \"3\", 1, \"center-circle\"], [\"x1\", \"60\", \"y1\", \"5\", \"x2\", \"60\", \"y2\", \"10\", 1, \"line\"], [\"id\", \"notifications\"], [4, \"ngIf\"], [1, \"buttons-container\"], [\"onclick\", \"pause()\", \"id\", \"pauseButton\"], [\"mat-icon-button\", \"\", 3, \"click\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", 3, \"click\"]],\n  template: function MeditationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n      i0.ɵɵtext(2, \"Meditate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 1);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(4, \"svg\", 2);\n      i0.ɵɵelement(5, \"circle\", 3)(6, \"circle\", 4)(7, \"line\", 5, 6)(9, \"circle\", 7)(10, \"line\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelementStart(11, \"div\");\n      i0.ɵɵtext(12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"div\", 9);\n      i0.ɵɵtemplate(14, MeditationComponent_div_14_Template, 5, 2, \"div\", 10);\n      i0.ɵɵelementStart(15, \"div\", 11)(16, \"button\", 12);\n      i0.ɵɵtext(17, \"Pause\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(18, MeditationComponent_button_18_Template, 4, 0, \"button\", 13);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(12);\n      i0.ɵɵtextInterpolate2(\"\", ctx.minutesDisplay, \":\", ctx.secondsDisplay, \"\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSummaryPanelVisible);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.isDistractedButtonVisible);\n    }\n  },\n  dependencies: [i3.NgIf, i4.MatIcon],\n  styles: [\"#stopwatch[_ngcontent-%COMP%] {\\n    font-family: 'Orbitron', sans-serif;\\n    color: #66ff99;\\n    font-size: 56px;\\n    text-align: center;\\n    margin: 30px 0;\\n}\\n\\n#stopwatch-container[_ngcontent-%COMP%] {\\n    width: 600px;\\n    margin: 0 auto;\\n    padding: 10px 0;\\n    color: #e7eafb;\\n    text-align: center;\\n}\\n\\n.buttons-container[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: center;\\n    padding: 5px 0;\\n}\\n\\nbutton[_ngcontent-%COMP%] {\\n    width: 230px;\\n    height: 40px;\\n    background-color: #202020;\\n    color: white;\\n    border-radius: 6px;\\n    border: 2px solid #fff;\\n    margin-left: 5px;\\n    margin-right: 5px;\\n    font-size: xx-large;\\n}\\n\\nbutton[_ngcontent-%COMP%]:hover {\\n    background-color: #fff;\\n    color: #202020;\\n    cursor: pointer;\\n}\\n\\n#setTimePanel[_ngcontent-%COMP%] {\\n    margin: 10px;\\n    font-size: 23px;\\n}\\n\\n#setTimePanel[_ngcontent-%COMP%]    > input[_ngcontent-%COMP%] {\\n    width: 100px;\\n    text-align: center;\\n    font-size: 23px;\\n}\\n\\n#pauseButton[_ngcontent-%COMP%], #distractedButton[_ngcontent-%COMP%], #summaryPanel[_ngcontent-%COMP%], #notifications[_ngcontent-%COMP%] {\\n    display: none;\\n}\\n\\n#totalTime[_ngcontent-%COMP%], #totalDistractions[_ngcontent-%COMP%]{\\n    font-weight: bold;\\n}\\n\\n.clock[_ngcontent-%COMP%] {\\n    margin: 0px auto;\\n    width: 250px;\\n    height: 250px;\\n    fill: black\\n}\\n.outer-circle[_ngcontent-%COMP%], .center-circle[_ngcontent-%COMP%] {\\n    fill: DarkSlateGray;\\n}\\n\\n.seconds[_ngcontent-%COMP%] {\\n    transform-origin: center;\\n    stroke-linecap: round;\\n}\\n\\n.seconds[_ngcontent-%COMP%] {\\n    stroke: white;\\n}\\n\\n.line[_ngcontent-%COMP%] {\\n    stroke-width: 1px;\\n    stroke: white;\\n    stroke-linecap: round;\\n    transform-origin: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWVkaXRhdGlvbi9tZWRpdGF0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksbUNBQW1DO0lBQ25DLGNBQWM7SUFDZCxlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osY0FBYztJQUNkLGVBQWU7SUFDZixjQUFjO0lBQ2Qsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLFlBQVk7SUFDWix5QkFBeUI7SUFDekIsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsY0FBYztJQUNkLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osZUFBZTtBQUNuQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsWUFBWTtJQUNaLGFBQWE7SUFDYjtBQUNKO0FBQ0E7O0lBRUksbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksd0JBQXdCO0lBQ3hCLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsYUFBYTtJQUNiLHFCQUFxQjtJQUNyQix3QkFBd0I7QUFDNUIiLCJzb3VyY2VzQ29udGVudCI6WyJcbiNzdG9wd2F0Y2gge1xuICAgIGZvbnQtZmFtaWx5OiAnT3JiaXRyb24nLCBzYW5zLXNlcmlmO1xuICAgIGNvbG9yOiAjNjZmZjk5O1xuICAgIGZvbnQtc2l6ZTogNTZweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAzMHB4IDA7XG59XG5cbiNzdG9wd2F0Y2gtY29udGFpbmVyIHtcbiAgICB3aWR0aDogNjAwcHg7XG4gICAgbWFyZ2luOiAwIGF1dG87XG4gICAgcGFkZGluZzogMTBweCAwO1xuICAgIGNvbG9yOiAjZTdlYWZiO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLmJ1dHRvbnMtY29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIHBhZGRpbmc6IDVweCAwO1xufVxuXG5idXR0b24ge1xuICAgIHdpZHRoOiAyMzBweDtcbiAgICBoZWlnaHQ6IDQwcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzIwMjAyMDtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgIGJvcmRlcjogMnB4IHNvbGlkICNmZmY7XG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgICBmb250LXNpemU6IHh4LWxhcmdlO1xufVxuXG5idXR0b246aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgY29sb3I6ICMyMDIwMjA7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4jc2V0VGltZVBhbmVsIHtcbiAgICBtYXJnaW46IDEwcHg7XG4gICAgZm9udC1zaXplOiAyM3B4O1xufVxuXG4jc2V0VGltZVBhbmVsID4gaW5wdXQge1xuICAgIHdpZHRoOiAxMDBweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAyM3B4O1xufVxuXG4jcGF1c2VCdXR0b24sICNkaXN0cmFjdGVkQnV0dG9uLCAjc3VtbWFyeVBhbmVsLCAjbm90aWZpY2F0aW9ucyB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cblxuI3RvdGFsVGltZSwgI3RvdGFsRGlzdHJhY3Rpb25ze1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4uY2xvY2sge1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgd2lkdGg6IDI1MHB4O1xuICAgIGhlaWdodDogMjUwcHg7XG4gICAgZmlsbDogYmxhY2tcbn1cbi5vdXRlci1jaXJjbGUsXG4uY2VudGVyLWNpcmNsZSB7XG4gICAgZmlsbDogRGFya1NsYXRlR3JheTtcbn1cblxuLnNlY29uZHMge1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcbiAgICBzdHJva2UtbGluZWNhcDogcm91bmQ7XG59XG5cbi5zZWNvbmRzIHtcbiAgICBzdHJva2U6IHdoaXRlO1xufVxuXG4ubGluZSB7XG4gICAgc3Ryb2tlLXdpZHRoOiAxcHg7XG4gICAgc3Ryb2tlOiB3aGl0ZTtcbiAgICBzdHJva2UtbGluZWNhcDogcm91bmQ7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["SnackBarDistractionComponent","i0","MeditationComponent","constructor","activatedroute","router","snackBar","params","subscribe","data","minutes","navigate","ngOnInit","isDistractedButtonVisible","isStopWatchVisible","totalTime","minutesToSeconds","degreesForSecond","degreesAccumulator","playBell","startMeditation","audio","Audio","play","timeoutId","setTimeout","seconds","secondsDisplay","toString","minutesDisplay","secondsLine","nativeElement","style","transform","isSummaryPanelVisible","clearTimeout","addDistraction","distractions","openDistractionSnackBar","openFromComponent","duration","selectors","viewQuery"],"sourceRoot":"","sources":["/home/ernesto/Proyectos/wellbeing-ui/wellbeing-ui/src/app/meditation/meditation.component.ts","/home/ernesto/Proyectos/wellbeing-ui/wellbeing-ui/src/app/meditation/meditation.component.html"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { SnackBarDistractionComponent } from '../snack-bar-distraction/snack-bar-distraction.component';\n\n@Component({\n  selector: 'app-meditation',\n  templateUrl: './meditation.component.html',\n  styleUrls: ['./meditation.component.css']\n})\nexport class MeditationComponent implements OnInit {\n\n  constructor( private activatedroute: ActivatedRoute, private router: Router, private snackBar: MatSnackBar ) {\n    this.activatedroute.params.subscribe(data => {\n      this.minutes = data.minutes;\n    });\n\n    if(this.minutes <= 0)\n      this.router.navigate(['/set-meditation-time']);\n  }\n  \n\n  @ViewChild('secondsLine') secondsLine!: ElementRef;\n\n  distractions = 0;\n  isDistractedButtonVisible = false;\n  isSummaryPanelVisible = false;\n  isStopWatchVisible = false;\n  secondsDisplay = '';\n  minutesDisplay = '';\n  seconds = 60;\n  minutes = 0;\n  totalTime = 0;\n  minutesToSeconds = 0;\n  degreesForSecond = 0;\n  degreesAccumulator = 0;\n\n  ngOnInit(): void {\n    this.isDistractedButtonVisible = true;\n    this.isStopWatchVisible = true;\n    this.totalTime = this.minutes;\n    this.minutesToSeconds = this.minutes * 60;\n    this.degreesForSecond = 360 / this.minutesToSeconds;\n    this.degreesAccumulator = this.degreesForSecond;\n    this.minutes--;\n    this.playBell();\n    this.startMeditation();\n  }\n\n  playBell() {\n    const audio = new Audio('assets/sound/tibetan-bell-sound-8s.mp3');\n    audio.play();\n  }\n\n  startMeditation(){\n\n    let timeoutId = setTimeout(() => {\n      this.seconds--;\n\n      if (this.seconds == -1) {\n          this.minutes -= 1;\n          this.seconds = 59;\n      }\n      if (this.seconds < 10) {\n        this.secondsDisplay = '0' + this.seconds;\n      } else {\n        this.secondsDisplay = this.seconds.toString();\n      }\n      if (this.minutes < 10) {\n        this.minutesDisplay = '0' + this.minutes;\n      } else {\n        this.minutesDisplay = this.minutes.toString();\n      }\n\n      this.secondsLine.nativeElement.style.transform = 'rotate(' + this.degreesAccumulator + 'deg)';\n      this.degreesAccumulator += this.degreesForSecond;\n\n      if(this.minutes == 0 && this.seconds == 0)\n      {\n          this.playBell();\n          this.isSummaryPanelVisible = true;\n          this.isDistractedButtonVisible = false;\n          this.isStopWatchVisible = false;\n\n          clearTimeout(timeoutId);\n\n          return;\n      }\n\n      this.startMeditation();\n    }, 1000);\n  }\n\n  addDistraction(){\n    this.distractions += 1;\n    this.openDistractionSnackBar();\n  }\n\n  openDistractionSnackBar() {\n    this.snackBar.openFromComponent(SnackBarDistractionComponent, {\n      duration: 10 * 1000,\n    });\n  }\n\n}\n","<div id=\"stopwatch-container\">\n    <h1>Meditate</h1>\n    <div class=\"clock\">\n        <svg class=\"circle\" viewBox=\"0 0 120 120\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n          <circle cx=\"60\" cy=\"60\" r=\"60\" class=\"outer-circle\"/>\n          <circle cx=\"60\" cy=\"60\" r=\"57\" />\n          <line x1=\"60\" y1=\"0\" x2=\"60\" y2=\"60\" class=\"seconds\" #secondsLine/>\n          <circle cx=\"60\" cy=\"60\" r=\"3\" class=\"center-circle\" />\n          <line x1=\"60\" y1=\"5\" x2=\"60\" y2=\"10\" class=\"line\" />\n        </svg>\n      </div>            \n    <div>{{minutesDisplay}}:{{secondsDisplay}}</div>\n    <div id=\"notifications\"></div>\n    <div *ngIf=\"this.isSummaryPanelVisible\">\n        <div>Total time: {{totalTime}}</div>\n        <div>Distractions: {{distractions}}</div>\n    </div>\n    \n    <div class=\"buttons-container\">\n      <button onclick=\"pause()\" id=\"pauseButton\">Pause</button>\n      <button mat-icon-button *ngIf=\"this.isDistractedButtonVisible\" (click)=\"addDistraction()\">\n          <mat-icon>add_circle</mat-icon> Distraction\n      </button>\n    </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}