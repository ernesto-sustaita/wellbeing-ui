{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/icon\";\nconst _c0 = [\"secondsLine\"];\nfunction MeditationComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r1.minutesDisplay, \":\", ctx_r1.secondsDisplay, \"\");\n  }\n}\nfunction MeditationComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Total time: \", ctx_r2.totalTime, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Distractions: \", ctx_r2.distractions, \"\");\n  }\n}\nfunction MeditationComponent_button_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function MeditationComponent_button_14_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.startMeditation(true));\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"play_circle\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class MeditationComponent {\n  constructor() {\n    this.distractions = 0;\n    this.isStartButtonVisible = true;\n    this.isDistractedButtonVisible = false;\n    this.isSummaryPanelVisible = false;\n    this.isStopWatchVisible = false;\n    this.secondsDisplay = '';\n    this.minutesDisplay = '';\n    this.seconds = 60;\n    this.minutes = 0;\n    this.totalTime = 0;\n    this.minutesToSeconds = 0;\n    this.degreesForSecond = 0;\n    this.degreesAccumulator = 0;\n  }\n  ngOnInit() {}\n  playBell() {\n    const audio = new Audio('assets/sound/tibetan-bell-sound-8s.mp3');\n    audio.play();\n  }\n  startMeditation(starting) {\n    if (starting) {\n      this.isStartButtonVisible = false;\n      this.isDistractedButtonVisible = true;\n      this.isStopWatchVisible = true;\n      this.totalTime = this.minutes;\n      this.minutesToSeconds = this.minutes * 60;\n      this.degreesForSecond = 360 / this.minutesToSeconds;\n      this.degreesAccumulator = this.degreesForSecond;\n      this.minutes--;\n      this.playBell();\n    }\n    let timeoutId = setTimeout(() => {\n      this.seconds--;\n      if (this.seconds == -1) {\n        this.minutes -= 1;\n        this.seconds = 59;\n      }\n      if (this.seconds < 10) {\n        this.secondsDisplay = '0' + this.seconds;\n      } else {\n        this.secondsDisplay = this.seconds.toString();\n      }\n      if (this.minutes < 10) {\n        this.minutesDisplay = '0' + this.minutes;\n      } else {\n        this.minutesDisplay = this.minutes.toString();\n      }\n      this.secondsLine.nativeElement.style.transform = 'rotate(' + this.degreesAccumulator + 'deg)';\n      this.degreesAccumulator += this.degreesForSecond;\n      //bellPlay = 0;\n      if (this.minutes == 0 && this.seconds == 0) {\n        //pause();\n        //document.getElementById('bell').play();\n        //document.getElementById(\"totalTime\").innerHTML = document.getElementById('setTime').value;\n        //document.getElementById(\"totalDistractions\").innerHTML = distractions;\n        //document.getElementById(\"summaryPanel\").style.display = 'block';\n        this.playBell();\n        this.isSummaryPanelVisible = true;\n        this.isDistractedButtonVisible = false;\n        this.isStopWatchVisible = false;\n        this.isStartButtonVisible = true;\n        //let intervalId = setInterval(playBell, 8000);\n        //function playBell(){\n        //    document.getElementById('bell').play();\n        //    bellPlay++;\n        //    if(bellPlay==2)\n        //        clearInterval(intervalId);\n        //}\n        clearTimeout(timeoutId);\n        return;\n      }\n      this.startMeditation(false);\n    }, 1000);\n  }\n  addDistraction() {\n    this.distractions += 1;\n  }\n}\nMeditationComponent.ɵfac = function MeditationComponent_Factory(t) {\n  return new (t || MeditationComponent)();\n};\nMeditationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MeditationComponent,\n  selectors: [[\"app-meditation\"]],\n  viewQuery: function MeditationComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.secondsLine = _t.first);\n    }\n  },\n  decls: 17,\n  vars: 3,\n  consts: [[\"id\", \"stopwatch-container\"], [1, \"clock\"], [\"viewBox\", \"0 0 120 120\", \"version\", \"1.1\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"circle\"], [\"cx\", \"60\", \"cy\", \"60\", \"r\", \"60\", 1, \"outer-circle\"], [\"cx\", \"60\", \"cy\", \"60\", \"r\", \"57\"], [\"x1\", \"60\", \"y1\", \"0\", \"x2\", \"60\", \"y2\", \"60\", 1, \"seconds\"], [\"secondsLine\", \"\"], [\"cx\", \"60\", \"cy\", \"60\", \"r\", \"3\", 1, \"center-circle\"], [\"x1\", \"60\", \"y1\", \"5\", \"x2\", \"60\", \"y2\", \"10\", 1, \"line\"], [4, \"ngIf\"], [\"id\", \"notifications\"], [\"mat-icon-button\", \"\", 3, \"click\", 4, \"ngIf\"], [\"onclick\", \"pause()\", \"id\", \"pauseButton\"], [\"mat-icon-button\", \"\", 3, \"click\"]],\n  template: function MeditationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n      i0.ɵɵtext(2, \"Meditate\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 1);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(4, \"svg\", 2);\n      i0.ɵɵelement(5, \"circle\", 3)(6, \"circle\", 4)(7, \"line\", 5, 6)(9, \"circle\", 7)(10, \"line\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(11, MeditationComponent_div_11_Template, 2, 2, \"div\", 9);\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelement(12, \"div\", 10);\n      i0.ɵɵtemplate(13, MeditationComponent_div_13_Template, 5, 2, \"div\", 9);\n      i0.ɵɵtemplate(14, MeditationComponent_button_14_Template, 3, 0, \"button\", 11);\n      i0.ɵɵelementStart(15, \"button\", 12);\n      i0.ɵɵtext(16, \"Pause\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngIf\", ctx.isStopWatchVisible);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSummaryPanelVisible);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isStartButtonVisible);\n    }\n  },\n  dependencies: [i1.NgIf, i2.MatIcon],\n  styles: [\"#stopwatch[_ngcontent-%COMP%] {\\n    font-family: 'Orbitron', sans-serif;\\n    color: #66ff99;\\n    font-size: 56px;\\n    text-align: center;\\n    margin: 30px 0;\\n}\\n\\n#stopwatch-container[_ngcontent-%COMP%] {\\n    width: 600px;\\n    margin: 0 auto;\\n    padding: 10px 0;\\n    color: #e7eafb;\\n    text-align: center;\\n}\\n\\nbutton[_ngcontent-%COMP%] {\\n    width: 50px;\\n    height: 40px;\\n    background-color: #202020;\\n    color: white;\\n    border-radius: 6px;\\n    border: 2px solid #fff;\\n    margin-left: 5px;\\n    margin-right: 5px;\\n}\\n\\nbutton[_ngcontent-%COMP%]:hover {\\n    background-color: #fff;\\n    color: #202020;\\n    cursor: pointer;\\n}\\n\\n#setTimePanel[_ngcontent-%COMP%] {\\n    margin: 10px;\\n    font-size: 23px;\\n}\\n\\n#setTimePanel[_ngcontent-%COMP%]    > input[_ngcontent-%COMP%] {\\n    width: 100px;\\n    text-align: center;\\n    font-size: 23px;\\n}\\n\\n#pauseButton[_ngcontent-%COMP%], #distractedButton[_ngcontent-%COMP%], #summaryPanel[_ngcontent-%COMP%], #notifications[_ngcontent-%COMP%] {\\n    display: none;\\n}\\n\\n#totalTime[_ngcontent-%COMP%], #totalDistractions[_ngcontent-%COMP%]{\\n    font-weight: bold;\\n}\\n\\n.clock[_ngcontent-%COMP%] {\\n    margin: 0px auto;\\n    width: 250px;\\n    height: 250px;\\n    fill: black\\n}\\n.outer-circle[_ngcontent-%COMP%], .center-circle[_ngcontent-%COMP%] {\\n    fill: DarkSlateGray;\\n}\\n\\n.seconds[_ngcontent-%COMP%] {\\n    transform-origin: center;\\n    stroke-linecap: round;\\n}\\n\\n.seconds[_ngcontent-%COMP%] {\\n    stroke: white;\\n}\\n\\n.line[_ngcontent-%COMP%] {\\n    stroke-width: 1px;\\n    stroke: white;\\n    stroke-linecap: round;\\n    transform-origin: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbWVkaXRhdGlvbi9tZWRpdGF0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0lBQ0ksbUNBQW1DO0lBQ25DLGNBQWM7SUFDZCxlQUFlO0lBQ2Ysa0JBQWtCO0lBQ2xCLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osY0FBYztJQUNkLGVBQWU7SUFDZixjQUFjO0lBQ2Qsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWix5QkFBeUI7SUFDekIsWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLHNCQUFzQjtJQUN0QixjQUFjO0lBQ2QsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixlQUFlO0FBQ25COztBQUVBO0lBQ0ksWUFBWTtJQUNaLGtCQUFrQjtJQUNsQixlQUFlO0FBQ25COztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixZQUFZO0lBQ1osYUFBYTtJQUNiO0FBQ0o7QUFDQTs7SUFFSSxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSx3QkFBd0I7SUFDeEIscUJBQXFCO0FBQ3pCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixhQUFhO0lBQ2IscUJBQXFCO0lBQ3JCLHdCQUF3QjtBQUM1QiIsInNvdXJjZXNDb250ZW50IjpbIlxuI3N0b3B3YXRjaCB7XG4gICAgZm9udC1mYW1pbHk6ICdPcmJpdHJvbicsIHNhbnMtc2VyaWY7XG4gICAgY29sb3I6ICM2NmZmOTk7XG4gICAgZm9udC1zaXplOiA1NnB4O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDMwcHggMDtcbn1cblxuI3N0b3B3YXRjaC1jb250YWluZXIge1xuICAgIHdpZHRoOiA2MDBweDtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICBwYWRkaW5nOiAxMHB4IDA7XG4gICAgY29sb3I6ICNlN2VhZmI7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG5idXR0b24ge1xuICAgIHdpZHRoOiA1MHB4O1xuICAgIGhlaWdodDogNDBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjAyMDIwO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgYm9yZGVyOiAycHggc29saWQgI2ZmZjtcbiAgICBtYXJnaW4tbGVmdDogNXB4O1xuICAgIG1hcmdpbi1yaWdodDogNXB4O1xufVxuXG5idXR0b246aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgY29sb3I6ICMyMDIwMjA7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4jc2V0VGltZVBhbmVsIHtcbiAgICBtYXJnaW46IDEwcHg7XG4gICAgZm9udC1zaXplOiAyM3B4O1xufVxuXG4jc2V0VGltZVBhbmVsID4gaW5wdXQge1xuICAgIHdpZHRoOiAxMDBweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zaXplOiAyM3B4O1xufVxuXG4jcGF1c2VCdXR0b24sICNkaXN0cmFjdGVkQnV0dG9uLCAjc3VtbWFyeVBhbmVsLCAjbm90aWZpY2F0aW9ucyB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cblxuI3RvdGFsVGltZSwgI3RvdGFsRGlzdHJhY3Rpb25ze1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4uY2xvY2sge1xuICAgIG1hcmdpbjogMHB4IGF1dG87XG4gICAgd2lkdGg6IDI1MHB4O1xuICAgIGhlaWdodDogMjUwcHg7XG4gICAgZmlsbDogYmxhY2tcbn1cbi5vdXRlci1jaXJjbGUsXG4uY2VudGVyLWNpcmNsZSB7XG4gICAgZmlsbDogRGFya1NsYXRlR3JheTtcbn1cblxuLnNlY29uZHMge1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlcjtcbiAgICBzdHJva2UtbGluZWNhcDogcm91bmQ7XG59XG5cbi5zZWNvbmRzIHtcbiAgICBzdHJva2U6IHdoaXRlO1xufVxuXG4ubGluZSB7XG4gICAgc3Ryb2tlLXdpZHRoOiAxcHg7XG4gICAgc3Ryb2tlOiB3aGl0ZTtcbiAgICBzdHJva2UtbGluZWNhcDogcm91bmQ7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","MeditationComponent","constructor","ngOnInit","playBell","audio","Audio","play","startMeditation","starting","isStartButtonVisible","isDistractedButtonVisible","isStopWatchVisible","totalTime","minutes","minutesToSeconds","degreesForSecond","degreesAccumulator","timeoutId","setTimeout","seconds","secondsDisplay","toString","minutesDisplay","secondsLine","nativeElement","style","transform","isSummaryPanelVisible","clearTimeout","addDistraction","distractions","selectors","viewQuery"],"sourceRoot":"","sources":["/home/ernesto/Proyectos/wellbeing-ui/wellbeing-ui/src/app/meditation/meditation.component.html","/home/ernesto/Proyectos/wellbeing-ui/wellbeing-ui/src/app/meditation/meditation.component.ts"],"sourcesContent":["<div id=\"stopwatch-container\">\n    <h1>Meditate</h1>\n    <div class=\"clock\">\n        <svg class=\"circle\" viewBox=\"0 0 120 120\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n          <circle cx=\"60\" cy=\"60\" r=\"60\" class=\"outer-circle\"/>\n          <circle cx=\"60\" cy=\"60\" r=\"57\" />\n          <line x1=\"60\" y1=\"0\" x2=\"60\" y2=\"60\" class=\"seconds\" #secondsLine/>\n          <circle cx=\"60\" cy=\"60\" r=\"3\" class=\"center-circle\" />\n          <line x1=\"60\" y1=\"5\" x2=\"60\" y2=\"10\" class=\"line\" />\n        </svg>\n      </div>            \n    <div *ngIf=\"this.isStopWatchVisible\">{{minutesDisplay}}:{{secondsDisplay}}</div>\n    <div id=\"notifications\"></div>\n    <div *ngIf=\"this.isSummaryPanelVisible\">\n        <div>Total time: {{totalTime}}</div>\n        <div>Distractions: {{distractions}}</div>\n    </div>\n    <button mat-icon-button  *ngIf=\"this.isStartButtonVisible\" (click)=\"startMeditation(true)\">\n        <mat-icon>play_circle</mat-icon>\n    </button>\n    \n    <button onclick=\"pause()\" id=\"pauseButton\">Pause</button>\n</div>\n","import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';\n\n@Component({\n  selector: 'app-meditation',\n  templateUrl: './meditation.component.html',\n  styleUrls: ['./meditation.component.css']\n})\nexport class MeditationComponent implements OnInit {\n\n  constructor() { }\n\n  @ViewChild('secondsLine') secondsLine!: ElementRef;\n\n  distractions = 0;\n  isStartButtonVisible = true;\n  isDistractedButtonVisible = false;\n  isSummaryPanelVisible = false;\n  isStopWatchVisible = false;\n  secondsDisplay = '';\n  minutesDisplay = '';\n  seconds = 60;\n  minutes = 0;\n  totalTime = 0;\n  minutesToSeconds = 0;\n  degreesForSecond = 0;\n  degreesAccumulator = 0;\n\n  ngOnInit(): void {\n  }\n\n  playBell() {\n    const audio = new Audio('assets/sound/tibetan-bell-sound-8s.mp3');\n    audio.play();\n  }\n\n  startMeditation(starting: boolean){\n\n    if(starting) {\n      this.isStartButtonVisible = false;\n      this.isDistractedButtonVisible = true;\n      this.isStopWatchVisible = true;\n      this.totalTime = this.minutes;\n      this.minutesToSeconds = this.minutes * 60;\n      this.degreesForSecond = 360 / this.minutesToSeconds;\n      this.degreesAccumulator = this.degreesForSecond;\n      this.minutes--;\n      this.playBell();\n    }\n\n    let timeoutId = setTimeout(() => {\n      this.seconds--;\n\n      if (this.seconds == -1) {\n          this.minutes -= 1;\n          this.seconds = 59;\n      }\n      if (this.seconds < 10) {\n        this.secondsDisplay = '0' + this.seconds;\n      } else {\n        this.secondsDisplay = this.seconds.toString();\n      }\n      if (this.minutes < 10) {\n        this.minutesDisplay = '0' + this.minutes;\n      } else {\n        this.minutesDisplay = this.minutes.toString();\n      }\n\n      this.secondsLine.nativeElement.style.transform = 'rotate(' + this.degreesAccumulator + 'deg)';\n      this.degreesAccumulator += this.degreesForSecond;\n\n      //bellPlay = 0;\n\n      if(this.minutes == 0 && this.seconds == 0)\n      {\n          //pause();\n          //document.getElementById('bell').play();\n          //document.getElementById(\"totalTime\").innerHTML = document.getElementById('setTime').value;\n          //document.getElementById(\"totalDistractions\").innerHTML = distractions;\n          //document.getElementById(\"summaryPanel\").style.display = 'block';\n\n          this.playBell();\n          this.isSummaryPanelVisible = true;\n          this.isDistractedButtonVisible = false;\n          this.isStopWatchVisible = false;\n          this.isStartButtonVisible = true;\n          \n          //let intervalId = setInterval(playBell, 8000);\n\n          //function playBell(){\n          //    document.getElementById('bell').play();\n          //    bellPlay++;\n          //    if(bellPlay==2)\n          //        clearInterval(intervalId);\n          //}\n\n          clearTimeout(timeoutId);\n\n          return;\n      }\n\n      this.startMeditation(false);\n    }, 1000);\n  }\n\n  addDistraction(){\n    this.distractions += 1;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}